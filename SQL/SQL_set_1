Q1) You have two tables Product & Supplier:
   Product Table - Product _id, product _name, supplier _id, price 
   Supplier Table - Supplier _id, Supplier _name, Country 
   You have to write a SQL query to find the name of the product with the highest price in each country.

=> Solution
TABLE : products
+------------+--------------+-------------+-------+
| product_id | product_name | supplier_id | price |
+------------+--------------+-------------+-------+
|          1 | Laptop       |           1 |  1000 |
|          2 | Smartphone   |           2 |   800 |
|          3 | Tablet       |           1 |   600 |
|          4 | Camera       |           3 |  1200 |
|          5 | Heaphones    |           2 |   150 |
|          6 | Mouse        |           3 |    25 |
+------------+--------------+-------------+-------+

TABLE : suppliers
+-------------+---------------+---------+
| supplier_id | supplier_name | country |
+-------------+---------------+---------+
|           1 | Electronics   | USA     |
|           2 | Tech          | China   |
|           3 | Gadget        | Japan   |
+-------------+---------------+---------+

WITH CTE AS (
    SELECT p.product_name, p.price, s.country,
    row_number() over(partition by country order by price desc) AS high_price
    FROM products p
    JOIN suppliers s
    ON p.supplier_id = s.supplier_id
    )
  
    SELECT product_name, price, country FROM CTE
    WHERE high_price = 1;

OUTPUT :
+--------------+-------+---------+
| product_name | price | country |
+--------------+-------+---------+
| Smartphone   |   800 | China   |
| Camera       |  1200 | Japan   |
| Laptop       |  1000 | USA     |
+--------------+-------+---------+

Q2) You are given a list of movies along with their genre in one table and ratings for each movie in another table.
    Write SQL to find movies with the highest average rating in each genre and then print the average rating starts(nearest whole number) 

=> Solution
TABLE : movies
+----------+------------------------+--------+
| movie_id | title                  | genre  |
+----------+------------------------+--------+
|        1 | The Dark Knight        | Action |
|        2 | Avengers: Infinity War | Action |
|        3 | Gladiator              | Action |
|        4 | Die Hard               | Action |
|        5 | The Godfather          | Drama  |
|        6 | Fight Club             | Drama  |
|        7 | The Hangover           | Comedy |
|        8 | Superbad               | Comedy |
+----------+------------------------+--------+

TABLE : ratings
+----------+--------+
| movie_id | rating |
+----------+--------+
|        1 |    4.5 |
|        1 |    2.5 |
|        2 |    4.1 |
|        5 |      3 |
|        5 |    5.2 |
|        6 |    3.4 |
|        7 |    2.3 |
|        7 |    3.4 |
|        8 |    2.9 |
|        1 |    4.5 |
|        1 |    2.5 |
|        2 |    4.1 |
|        5 |      3 |
|        5 |    5.2 |
|        6 |    3.4 |
|        7 |    2.3 |
|        7 |    3.4 |
|        8 |    2.9 |
+----------+--------+

WITH CTE AS (
SELECT m.title, m.genre, r.rating,
row_number() over(partition by m.genre order by rating desc) AS high_rating
FROM movies m
JOIN ratings r
ON m.movie_id = r.movie_id
)

SELECT title, genre, ROUND(AVG(rating)) FROM CTE
WHERE high_rating = 1
GROUP BY title, genre;

OUTPUT :
+-----------------+--------+--------------------+
| title           | genre  | ROUND(AVG(rating)) |
+-----------------+--------+--------------------+
| The Dark Knight | Action |                  4 |
| The Hangover    | Comedy |                  3 |
| The Godfather   | Drama  |                  5 |
+-----------------+--------+--------------------+

Q3) Given a table of candidates and their skills, you're tasked with finding the candidates best suited for an open Data Science job. 
    You want to find candidates who are proficient in Python, Tableau, and PostgreSQL. Write a query to list the candidates who possess all of the required skills for the job. Sort the output by candidate ID in ascending order.

=> Solution :
TABLE :
+--------------+------------+
| candidate_id | skill      |
+--------------+------------+
|          123 | python     |
|          123 | tableau    |
|          123 | postgreSQL |
|          123 | R          |
|          234 | R          |
|          234 | power bi   |
|          234 | SQL server |
|          345 | Python     |
|          345 | tableau    |
+--------------+------------+

SELECT candidate_id FROM candidates
WHERE skill IN ('python','tableau','postgreSQL')
GROUP BY candidate_id
HAVING COUNT(skill) = 3;

OUTPUT :
+--------------+
| candidate_id |
+--------------+
|          123 |
+--------------+
